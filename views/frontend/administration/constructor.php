<?php

/** @var $model ConstructorTerritoryForm */

use app\models\forms\ConstructorTerritoryForm;
use app\models\work\ObjectWork;

?>

<style>
    #scene-container {
        height: 600px;
    }
    #scene-container canvas {
        border-radius: 15px;
    }
    .template-wrapper-desc {
        padding: 30px;
        background-color: white;
        border-radius: 15px;
        margin: 10px 0 10px 0;
    }
    .btn-primary {
        margin: 5px;
    }
</style>

<div class="sticky-block template-wrapper-desc">
    <div><h4>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ú–ê–§!</h4></div>
    <div>üîÑ <b>–î–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å—Ü–µ–Ω—ã:</b> –∑–∞–∂–º–∏—Ç–µ –õ–ö–ú –∏ —Å–º–∞—Ö–Ω–∏—Ç–µ –≤ –Ω—É–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É</div>
    <div>üîç <b>–î–ª—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è/–æ—Ç–¥–∞–ª–µ–Ω–∏—è:</b> –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏</div>
    <div>‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤:</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É (—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ —Å—Ü–µ–Ω—ã) —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ú–ê–§</div>
    <div>üñ±Ô∏è <b>–î–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:</b> –Ω–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ –æ–±—ä–µ–∫—Ç, –∑–∞–∂–º–∏—Ç–µ –õ–ö–ú –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –æ–±—ä–µ–∫—Ç</div>
    <div>üîÑ <b>–î–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:</b> –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ (–Ω–µ –æ—Ç–ø—É—Å–∫–∞—è –õ–ö–ú)</div>
    <div>üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤:</b> –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º –ü–ö–ú</div>
    <div>‚ö†Ô∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–æ–≥–æ. –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç "–∑–∞–≤–∏—Å" –≤ –≤–æ–∑–¥—É—Ö–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ</div>
</div>

<div class="template-wrapper-desc">
    <h3>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∂–∏—Ç–µ–ª–µ–π</h3>
    <span><b>–†–µ–∫—Ä–µ–∞—Ü–∏—è:</b> <?= $model->averageMindset[ObjectWork::TYPE_RECREATION] ?>% </span><br>
    <span><b>–°–ø–æ—Ä—Ç:</b> <?= $model->averageMindset[ObjectWork::TYPE_SPORT] ?>% </span><br>
    <span><b>–†–∞–∑–≤–∏—Ç–∏–µ:</b> <?= $model->averageMindset[ObjectWork::TYPE_EDUCATION] ?>% </span><br>
    <span><b>–ò–≥—Ä—ã:</b> <?= $model->averageMindset[ObjectWork::TYPE_GAME] ?>% </span>
    <div style="margin-top: 10px;"><b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:</b> <span id="cost">0</span> ‚ÇΩ</div>
</div>

<div>
    <!--<h3>–ñ–∏—Ç–µ–ª–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –≤—ã–±–∏—Ä–∞—é—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫—É—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∫—É:</h3>
    <span><?php /*var_dump($model->generatePriorityArrangement()->getRawMatrix()) */?></span>
    <h2>–ë—é–¥–∂–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—É—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∫—É: </h2>
    <span><?php /*= $model->generatePriorityArrangement()->calculateBudget(); */?>‚ÇΩ</span>
    <h2>–í—Ä–µ–º—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è/—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤: </h2>
    <span><?php /*= $model->generatePriorityArrangement()->calculateCreatedTime(); */?>–¥. / <?php /*= $model->generatePriorityArrangement()->calculateInstallationTime(); */?>–¥.</span>-->
</div>

<div id="scene-container"></div>
<div id="anal-block"></div>

<?php
    $jsonString = ObjectWork::getAllObjectsJson();
    $data = json_decode($jsonString, true);

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
    foreach ($data['data'] as $item) {
        $color = $item['type'] == 1 ? '#9dcae5' : ($item['type'] == 2 ? '#b7e2ae' : ($item['type'] == 3 ? '#d4a4de' : '#faf0ae'));
        $colorHover = $item['type'] == 1 ? '#2b6a92' : ($item['type'] == 2 ? '#3b7233' : ($item['type'] == 3 ? '#823f89' : '#74762f'));
        $style = 'background-color: '.$color.'!important; border-color: white; color: black;';
        echo '<button class="btn btn-primary" style="'.$style.'" onmouseover="this.style.backgroundColor=\''.$colorHover.'\'" onmouseout="this.style.backgroundColor=\''.$color.'\'" onclick="addObject(' . $item['id'] . ', ' . $item['width'] . ', ' . $item['length'] . ', ' . $item['height'] . ', \'' . $item['link'] . '\', ' . $item['cost'] . ')">' . $item['name'] . '</button>';
    }
?>

<script>
    var gridSizeX = '<?php echo json_decode($model->getSize(), true)['width'] + 1;?>';
    var gridSizeY = '<?php echo json_decode($model->getSize(), true)['length'] + 1;?>';
    var gridSizeZ = 10;
</script>

<script src="https://cdn.jsdelivr.net/npm/three@0.130.1/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.130.1/examples/js/loaders/GLTFLoader.js"></script>
<script>
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    const scene = new THREE.Scene();
    scene.background = new THREE.Color('#F0F8FF');
    const sceneContainer = document.getElementById('scene-container');

    const camera = new THREE.PerspectiveCamera( 75, sceneContainer.clientWidth / sceneContainer.clientHeight, 1, 1000 );
    camera.position.z = 10;
    camera.position.y = -5;
    camera.rotation.x = 0.5;

    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(sceneContainer.clientWidth, sceneContainer.clientHeight);
    sceneContainer.appendChild(renderer.domElement);

    //-----------------------------------------------

    const drift = 0.5;

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
    var gridGeometry = new THREE.PlaneBufferGeometry(1, 1);
    var gridMesh = new THREE.Group();

    var gridColor = new THREE.Color('#f0f8ff'); // –°–µ—Ä—ã–π —Ü–≤–µ—Ç

    var edgesMaterial = new THREE.LineBasicMaterial({ color: 0x000000 }); // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
    var driftCellX = gridSizeX % 2 == 0 ? 0 : drift;
    var driftCellY = gridSizeY % 2 == 0 ? 0 : drift;

    for (var i = 0; i < gridSizeX * gridSizeY; i++) {
        var cellGeometry = new THREE.BoxBufferGeometry(1, 1, 0.01);
        var cellMaterial = new THREE.MeshBasicMaterial({ color: gridColor, transparent: true, opacity: 0.5, side: THREE.DoubleSide }); // –û–¥–∏–Ω —Ü–≤–µ—Ç –∏ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        var cell = new THREE.Mesh(cellGeometry, cellMaterial);
        var edges = new THREE.LineSegments(new THREE.EdgesGeometry(cellGeometry), edgesMaterial);
        cell.position.set(i % gridSizeX - gridSizeX / 2 + driftCellX, Math.floor(i / gridSizeX) - gridSizeY / 2 + driftCellY, 0);
        gridMesh.add(cell);
        cell.add(edges); // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫ —è—á–µ–π–∫–µ
    }

    // –î–æ–±–∞–≤–∏–ª–∏ —Å–µ—Ç–∫—É –Ω–∞ —Å—Ü–µ–Ω—É
    scene.add(gridMesh);

    //-----------------------------------------------

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
    function addObject(idObject, width, lenght, height, link, name)
    {
        selectedObject = null;
        blockObjectSelection = null;

        const loader = new THREE.GLTFLoader();
        var rotateX = (lenght % 2 === 0) ? drift : 0;
        var rotateY = (width % 2 === 0) ? drift : 0;

        const randomColor = Math.floor(Math.random() * 16777215).toString(16);
        var material = new THREE.MeshBasicMaterial({transparent: true, color: parseInt(randomColor, 16), side: THREE.DoubleSide });

        if (height / 3 > axisZ || gridSizeZ < 10 + height)
        {
            axisZ = height / 3;
            gridSizeZ = height + 10;
        }

        if (!link)
        {
            link = 'models/educational/–∫–∞—á–µ–ª–∏-–±–∞–ª–∞–Ω—Å–∏—Ä –ë—Ä–µ–≤–Ω–æ –ø—Ä–æ–±–Ω—ã–π.glb';
        }

        loader.load(
            link,
            function (gltf) {
                const model = gltf.scene;
                // –ù–∞–π–¥–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –º–æ–¥–µ–ª–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –¥–ª—è –Ω–∏—Ö —Ç–µ–∫—Å—Ç—É—Ä—ã
                model.traverse((child) => {
                    if (child.isMesh) {
                        if (child.material.map)
                        {
                            material = new THREE.MeshBasicMaterial({ map: child.material.map });
                        }
                        child.material = material;
                    }
                });
                model.scale.set(1, 1, 1);
                model.position.set(0 + rotateX, 0 + rotateY, 0);
                model.userData.name = name;

                // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ —Å—Ü–µ–Ω—É
                scene.add(model);
                interactiveObjects.push(model);
            },
            undefined,
            function (error) {
                // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω (–ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥)
                const geometry = new THREE.BoxGeometry(lenght, width, height);
                const oneObject = new THREE.Mesh(geometry, material);

                oneObject.position.set(0 + rotateX, 0 + rotateY, height/2);
                oneObject.name = name;
                scene.add(oneObject);
                interactiveObjects.push(oneObject);
                console.error('Error loading 3D model', error);
            }
        );

        const costElement = document.getElementById('cost');
        costElement.textContent = parseFloat(costElement.textContent) + parseFloat(name);
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏
    //--------------------------------

    var dot = {
        x: 'undefined',
        y: 'undefined',
        addDot: function (x, y) {
            this.x = x;
            this.y = y;
        },
        isIntegerCoordinate: function () {
            return Number.isInteger(this.x) && Number.isInteger(this.y);
        },
        clearDot: function () {
            this.x = 'undefined';
            this.y = 'undefined';
        },
        isEmpty: function () {
            return this.x === 'undefined' || this.y === 'undefined';
        }
    }

    function isEqualsDots(anotherDot, otherDot) {
        if (!anotherDot || !otherDot)
            return false;
        return anotherDot.x == otherDot.x && anotherDot.y == otherDot.y;
    }

    // –ú–∞—Å—Å–∏–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é –æ–±—ä–µ–∫—Ç–æ–≤
    var interactiveObjects = [];

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    var isDragging = false;
    var selectedObject = null;
    var isModel = false;
    var axisZ = 2;   // –í—ã—Å–æ—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –ø–æ–¥–Ω–∏–º–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
    var offset = new THREE.Vector3();

    var boxHelper = null;

    var selectedObjectRotateX = false;
    var selectedObjectRotateY = false;
    let selectedObjectRotatePoint = {
        point0deg: Object.create(dot),
        point90deg: Object.create(dot),
        isEmptyPoint: function () {
            return this.point0deg.isEmpty() || this.point90deg.isEmpty();
        },
        clear: function () {
            this.point0deg.clearDot();
            this.point90deg.clearDot();
        },
        addPoint0deg: function (x, y) {
            this.point0deg.addDot(x, y);
        },
        addPoint90deg: function (x, y) {
            this.point90deg.addDot(x, y);
        },
        getPoint: function () {
            if (isRotation())
            {
                return this.point90deg;
            }

            return this.point0deg;
        }
    };
    var blockObjectSelection = null;
    var intersectionPoint = {x: 0, y: 0};

    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞–º–µ—Ä—ã
    var isRotateCamera = false;
    var isZoom = false;
    var degreeCamera = 0;
    var previousMouseX = 0;
    var previousMouseY = 0;

    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –æ—Å–∏ OX
    function directionX(event)
    {
        var currentMouseX = event.clientX;
        var direction = 1;

        if (currentMouseX < previousMouseX) {
            direction *=  -1;
        }

        previousMouseX = currentMouseX;
        return direction;
    }

    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –æ—Å–∏ OY
    function directionY(event)
    {
        var currentMouseY = event.clientY;
        var direction = 1;

        if (currentMouseY > previousMouseY) {
            direction *= -1;
        }

        previousMouseY = currentMouseY;
        return direction;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞–º–µ—Ä—ã
    function whereGoCamera(event)
    {
        degreeCamera += 90 * directionX(event);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–µ—Ä—ã –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
    function updateCamera()
    {
        if (Math.abs(degreeCamera) === 360 || degreeCamera === 0)
        {
            degreeCamera = 0;
            camera.position.set(0, -(gridSizeY / 2), gridSizeZ);
            camera.rotation.set(0.5, 0, 0);
        }
        else if (degreeCamera === 90 || degreeCamera === -270)
        {
            camera.position.set(-(gridSizeY / 2), 0, gridSizeZ);
            camera.rotation.set(0, -0.5, -Math.PI/2);
        }
        else if (Math.abs(degreeCamera) === 180)
        {
            camera.position.set(0, gridSizeX / 2, gridSizeZ);
            camera.rotation.set(-0.5, 0, Math.PI);
        }
        else if (degreeCamera === -90 || degreeCamera === 270)
        {
            camera.position.set(gridSizeX / 2, 0, gridSizeZ);
            camera.rotation.set(0, 0.5, Math.PI/2);
        }

        camera.updateMatrixWorld();
    }

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã
    function zoom(event) {
        if (isZoom)
        {
            camera.position.z += event.deltaY > 0 ? 1 : -1;
            event.preventDefault();
        }
    }

    //---------------------------------------------

    function getIntersects(event)
    {
        var mouse = new THREE.Vector2();
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

        var raycaster = new THREE.Raycaster();
        raycaster.params.PointsCloud = { threshold: 10 };
        raycaster.setFromCamera(mouse, camera);

        return raycaster.intersectObjects(interactiveObjects, true);
    }

    function findRootParent(obj) {
        let currentObj = obj;

        // –ü–æ–∫–∞ —É —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å, –¥–≤–∏–≥–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –ø–æ —Ü–µ–ø–æ—á–∫–µ
        while (currentObj.parent) {
            if (currentObj.type === 'Group')
                break;
            currentObj = currentObj.parent;
        }

        return currentObj;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –Ω–∞ –æ–±—ä–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    function addOutlineOnHover(event)
    {
        if (!isDragging)
        {
            var intersects = getIntersects(event);

            selectedObject = null;
            isModel = false;

            if (boxHelper)
            {
                scene.remove(boxHelper);
                boxHelper = null;
            }

            if (intersects.length > 0) {
                selectedObject = intersects[0].object;

                if (selectedObject.type === 'undefined')
                {
                    selectedObject = selectedObject[0];
                }

                selectedObject = findRootParent(selectedObject);

                if (blockObjectSelection) {
                    if (blockObjectSelection !== selectedObject) {
                        intersects = null;
                        selectedObject = null;
                        isModel = false;
                    }
                }

                if (selectedObject)
                {
                    updateBoxHelper();
                }
            }
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    function updatePositionSelectedObject (newDot, newZ = null)
    {
        if (newZ === null)
        {
            newZ = axisZ;
        }

        selectedObject.position.set(newDot.x, newDot.y, newZ);
        boxHelper.position.set(newDot.x, newDot.y, newZ);

        setColorGridMesh(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–Ω–∏
    }

    // –ü–æ–≤–æ—Ä–æ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–∫—Ä—É–≥ —Å–≤–æ–µ–π –æ—Å–∏
    document.getElementById('scene-container').addEventListener('wheel', (event) => {
        if (selectedObject && isDragging)
        {
            event.preventDefault();
            const direction = event.deltaY > 0 ? 1 : -1;
            selectedObject.rotation.z += (Math.PI / 2) * direction;

            if (Math.abs(selectedObject.rotation.z / Math.PI) === 2)
                selectedObject.rotation.z = 0;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å "–¥–æ–≤–æ—Ä–æ—Ç–∞" —Ñ–∏–≥—É—Ä—ã, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Å–µ—Ç–∫—É
            if (selectedObjectRotateX || selectedObjectRotateY)
            {
                if (selectedObjectRotatePoint.isEmptyPoint())
                {
                    selectedObjectRotatePoint.addPoint0deg(selectedObject.position.x, selectedObject.position.y);

                    var rotateX = selectedObjectRotateX ? drift : 0;
                    var rotateY = selectedObjectRotateY ? drift : 0;

                    selectedObjectRotatePoint.addPoint90deg(selectedObject.position.x + rotateX - rotateY, selectedObject.position.y + rotateY - rotateX)
                }

                updatePositionSelectedObject(selectedObjectRotatePoint.getPoint());
            }

            updateBoxHelper();
        }
    });

    function isRotation()
    {
        return Number.isInteger(selectedObject.rotation.z / Math.PI);
    }

    function getWidthSelectedObject()
    {
        const boundingBox = new THREE.Box3().setFromObject(selectedObject);
        return Math.ceil(boundingBox.max.x - boundingBox.min.x);
    }

    function getLenghtSelectedObject()
    {
        const boundingBox = new THREE.Box3().setFromObject(selectedObject);
        return Math.ceil(boundingBox.max.y - boundingBox.min.y);
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–Ω–∏ –Ω–∞ —Å—Ü–µ–Ω–µ
    function setColorGridMesh()
    {
        var widthObject = getWidthSelectedObject();
        var heightObject = getLenghtSelectedObject();

        var dotsObject = [];
        for (var i = 0; i < widthObject * heightObject; i++)
        {
            var oneDot = Object.create(dot);
            var x = i % widthObject - widthObject / 2 + driftCellX + selectedObject.position.x;
            var y = Math.floor(i / widthObject) - heightObject / 2 + driftCellY + selectedObject.position.y;

            oneDot.addDot(x, y);
            dotsObject.push(oneDot);
        }

        var color = '#00FF00';

        if (isFreedomPosition())
        {
            blockObjectSelection = null;
        }
        else
        {
            blockObjectSelection = selectedObject;
            color = '#FF0000';
        }

        var cellDot = Object.create(dot);
        gridMesh.children.forEach((cell) => {
            cellDot.addDot(cell.position.x, cell.position.y);
            cell.material.color.set(gridColor);
            for (var i = 0; i < dotsObject.length; i++)
            {
                if(isEqualsDots(cellDot, dotsObject[i]))
                {
                    cell.material.color.set(color);
                    delete dotsObject[i];
                    break;
                }
            }
        })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    function doSegmentsIntersect(firstSegmentMin, firstSegmentMax, secondSegmentMin, secondSegmentMax) {
        if (firstSegmentMax > secondSegmentMin && firstSegmentMin < secondSegmentMin
            || firstSegmentMax > secondSegmentMax && firstSegmentMin < secondSegmentMax)
        {
            return true;
        }

        return false;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ –ª–∏ –ø–æ–ª–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    function isFreedomPosition()
    {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–ø–∏–ø–µ–¥ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        const boundingBox = new THREE.Box3().setFromObject(selectedObject);

        for (let i = 0; i < interactiveObjects.length; i++) {
            if (selectedObject.parent != interactiveObjects[i])
            {
                const boundingBoxOtherObject = new THREE.Box3().setFromObject(interactiveObjects[i]);

                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –æ–±—ä–µ–∫—Ç–æ–≤
                if (doSegmentsIntersect(boundingBox.min.x, boundingBox.max.x, boundingBoxOtherObject.min.x, boundingBoxOtherObject.max.x)
                    && doSegmentsIntersect(boundingBox.min.y, boundingBox.max.y, boundingBoxOtherObject.min.y, boundingBoxOtherObject.max.y)) {
                    return false;
                }
            }
        }

        return true;
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü –æ–±—ä–µ–∫—Ç–∞
    function updateBoxHelper()
    {
        scene.remove(boxHelper);
        boxHelper = new THREE.BoxHelper(selectedObject, 0x0fff00);
        scene.add(boxHelper);

        // –†–∞—Å—Å—á–µ—Ç –æ–±—â–∏—Ö –≥—Ä–∞–Ω–∏—Ü –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
        var boundingBox = new THREE.Box3();
        selectedObject.traverse(function(obj) {
            if (obj.geometry) {
                obj.geometry.computeBoundingBox();
                boundingBox.expandByPoint(obj.geometry.boundingBox.min);
                boundingBox.expandByPoint(obj.geometry.boundingBox.max);
            }
        });

        // –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é –æ–±–æ–ª–æ—á–∫–∏
        boxHelper.scale.setFromMatrixScale(selectedObject.matrixWorld);
        boxHelper.position.set((boundingBox.min.x + boundingBox.max.x) / 2, (boundingBox.min.y + boundingBox.max.y) / 2, (boundingBox.min.z + boundingBox.max.z) / 2);
        //boxHelper.rotation.z = selectedObject.rotation.z;
        boxHelper.update();
    }

    // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    function dragAndDrop(event)
    {
        if (isDragging)
        {
            var intersects = getIntersects(event);

            // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —à–∏—Ä–∏–Ω—ã –∏ –ø–æ–ª–æ–≤–∏–Ω—É –¥–ª–∏–Ω—ã –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            var halfWidth = getWidthSelectedObject() / 2;
            var halfHeight = getLenghtSelectedObject() / 2;
            var maxX = gridSizeX / 2 - drift - halfWidth;
            var minX = -gridSizeX / 2 + drift + halfWidth;
            var maxY = gridSizeY / 2 - drift - halfHeight;
            var minY = -gridSizeY / 2 + drift + halfHeight;

            if (Math.abs(degreeCamera) === 360 || degreeCamera === 0) {
                intersectionPoint.x = Math.max(Math.min(intersectionPoint.x + directionX(event) * 0.1, maxX), minX);
                intersectionPoint.y = Math.max(Math.min(intersectionPoint.y + directionY(event) * 0.1, maxY), minY);
            } else if (Math.abs(degreeCamera) === 180) {
                intersectionPoint.x = Math.max(Math.min(intersectionPoint.x - directionX(event) * 0.1, maxX), minX);
                intersectionPoint.y = Math.max(Math.min(intersectionPoint.y - directionY(event) * 0.1, maxY), minY);
            } else if (degreeCamera === 270 || degreeCamera === -90) {
                intersectionPoint.x = Math.max(Math.min(intersectionPoint.x - directionY(event) * 0.1, maxX), minX);
                intersectionPoint.y = Math.max(Math.min(intersectionPoint.y + directionX(event) * 0.1, maxY), minY);
            } else {
                intersectionPoint.x = Math.max(Math.min(intersectionPoint.x + directionY(event) * 0.1, maxX), minX);
                intersectionPoint.y = Math.max(Math.min(intersectionPoint.y - directionX(event) * 0.1, maxY), minY);
            }

            var newX = intersectionPoint.x;//> maxX ? maxX : intersectionPoint.x;
            var newY = intersectionPoint.y; //> maxY ? maxY : intersectionPoint.y;

            var rotateWidth = selectedObjectRotateX ? drift : 0;
            var rotateHeight = selectedObjectRotateY ? drift : 0;

            var coordinate = Object.create(selectedObjectRotatePoint);
            coordinate.addPoint0deg(Math.round(newX) + rotateHeight, Math.round(newY) + rotateWidth);
            coordinate.addPoint90deg(Math.round(newX) + rotateWidth, Math.round(newY) + rotateHeight);
            updatePositionSelectedObject(coordinate.getPoint());

            updateBoxHelper();
            setColorGridMesh();
        }
    }

    function onMouseDown()
    {
        if(selectedObject)
        {
            isDragging = true;
            updateBoxHelper();

            selectedObjectRotateX = getWidthSelectedObject() % 2 === 0;
            selectedObjectRotateY = getLenghtSelectedObject() % 2 === 0;

            isZoom = false;
        }
        else
        {
            isRotateCamera = true;
            previousMouseX = event.clientX;
        }
    }

    function onMouseUp()
    {
        isDragging = false;

        if (selectedObject)
        {
            if (!blockObjectSelection)
            {
                var newDot = new dot.addDot(selectedObject.position.x, selectedObject.position.y);
                for(var z = axisZ; z > 0.5; z -= 0.01)
                {
                    updatePositionSelectedObject(newDot, z);
                }
            }

            selectedObjectRotateX = false;
            selectedObjectRotateY = false;
            selectedObjectRotatePoint.clear();

            gridMesh.children.forEach((cell) => {
                cell.material.color.set(gridColor);
            });
            /*selectedObject = null;
            isModel = false;

            if (boxHelper)
            {
                scene.remove(boxHelper);
                boxHelper = null;
            }*/


        }
        else if (isRotateCamera )
        {
            isRotateCamera = false;
            whereGoCamera(event);
            updateCamera();
        }

        isZoom = true;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
    function onMouseRightClick(event) {
        if (selectedObject) {
            var cost = parseFloat(selectedObject.name);
            if (selectedObject.type === 'Group')
            {
                selectedObject = selectedObject.parent;
                cost = selectedObject.userData.name;
            }

            const costElement = document.getElementById('cost');
            costElement.textContent = parseFloat(costElement.textContent) - cost;

            scene.remove(selectedObject);
            gridMesh.children.forEach((cell) => {
                cell.material.color.set(gridColor);
            });

            selectedObjectRotateX = false;
            selectedObjectRotateY = false;
            selectedObjectRotatePoint.clear();

            for (let i = 0; i < interactiveObjects.length; i++)
            {
                if (interactiveObjects[i] === selectedObject)
                {
                    interactiveObjects.splice(i, 1);
                    break;
                }
            }

            selectedObject = null;
            blockObjectSelection = null;
            scene.remove(boxHelper);
            //setColorGridMesh();

            //onMouseUp();
            event.preventDefault(); // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–ª–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏
    sceneContainer.addEventListener('contextmenu', onMouseRightClick, false);
    sceneContainer.addEventListener('mousemove', dragAndDrop, false);
    sceneContainer.addEventListener('mousedown', onMouseDown, false);
    sceneContainer.addEventListener('mouseup', onMouseUp, false);
    sceneContainer.addEventListener('mousemove', addOutlineOnHover, false);
    sceneContainer.addEventListener('wheel', zoom, false);

    //------------------------------------

    function animate()
    {
        requestAnimationFrame( animate );
        renderer.render( scene, camera );
    }
    animate();

</script>